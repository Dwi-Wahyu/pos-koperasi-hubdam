generator client {
  provider = "prisma-client-js"
  output   = "../src/app/generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model user {
  id          String        @id @default(uuid())
  name        String
  email       String        @unique
  password    String
  role        user_role     @default(ADMIN)
  createdAt   DateTime      @default(now()) @map("created_at")
  updatedAt   DateTime      @updatedAt @map("updated_at")
  audit       audit[]
  preorder    preorder[]
  transaction transaction[]

  avatar     String?   @default("uploads/avatar/default-avatar.jpg")
  last_login DateTime?
}

model audit {
  id         Int      @id @default(autoincrement())
  action     String
  action_url String?
  ip_address String?
  created_at DateTime @default(now())
  user_id    String
  user       user     @relation(fields: [user_id], references: [id])

  @@index([user_id], map: "audit_user_id_fkey")
}

model category {
  id      Int       @id @default(autoincrement())
  name    String
  product product[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model inventory {
  id      Int       @id @default(autoincrement())
  name    String
  image   String?
  product product[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model preorder {
  id         Int             @id @default(autoincrement())
  quantity   Int
  status     preorder_status @default(PENDING)
  created_at DateTime        @default(now())
  updated_at DateTime        @updatedAt

  product_option_id Int
  product_option    product_option @relation(fields: [product_option_id], references: [id])

  customer_id String
  customer    user   @relation(fields: [customer_id], references: [id])

  @@index([customer_id], map: "preorder_customer_id_fkey")
  @@index([product_option_id], map: "preorder_product_option_id_fkey")
}

model product {
  id          Int               @id @default(autoincrement())
  name        String
  image       String?
  category_id Int?
  category    category?         @relation(fields: [category_id], references: [id])
  inventoryId Int?
  inventory   inventory?        @relation(fields: [inventoryId], references: [id])
  variants    product_variant[]

  created_at DateTime @default(now()) @map("created_at")
  updated_at DateTime @updatedAt @map("updated_at")

  @@index([category_id], map: "product_category_id_fkey")
  @@index([inventoryId], map: "product_inventoryId_fkey")
}

model product_variant {
  id         Int              @id @default(autoincrement())
  product_id Int
  name       String           @unique
  product    product          @relation(fields: [product_id], references: [id])
  options    product_option[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@index([product_id], map: "product_variant_product_id_fkey")
}

model product_option {
  id                Int                @id @default(autoincrement())
  sku               String             @unique
  image             String?
  price             Int
  cost              Int                @default(0)
  stock             Int                @default(0)
  option_value      String // contoh: "L"
  variant_id        Int
  variant           product_variant    @relation(fields: [variant_id], references: [id])
  transaction_items transaction_item[]
  product_history   product_history[]
  preorder          preorder[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@index([variant_id], map: "product_option_variant_id_fkey")
}

model product_history {
  id                Int                         @id @default(autoincrement())
  product_option_id Int
  change_type       product_history_change_type @default(IN)
  quantity_before   Int
  quantity_after    Int
  changed_at        DateTime                    @default(now())
  product_option    product_option              @relation(fields: [product_option_id], references: [id])

  @@index([product_option_id], map: "product_history_product_option_id_fkey")
}

model setting {
  id    Int    @id @default(autoincrement())
  key   String @unique
  value String
}

model transaction {
  id               Int                @id @default(autoincrement())
  total            Int
  status           transaction_status @default(PAID)
  created_at       DateTime           @default(now())
  updated_at       DateTime
  customer_id      String?
  customer         user?              @relation(fields: [customer_id], references: [id])
  transaction_item transaction_item[]

  @@index([customer_id], map: "transaction_customer_id_fkey")
}

model transaction_item {
  id Int @id @default(autoincrement())

  quantity          Int
  price             Int
  product_option_id Int
  product_option    product_option @relation(fields: [product_option_id], references: [id])
  transaction_id    Int
  transaction       transaction    @relation(fields: [transaction_id], references: [id])

  @@index([product_option_id], map: "transaction_item_product_option_id_fkey")
  @@index([transaction_id], map: "transaction_item_transaction_id_fkey")
}

enum product_history_change_type {
  IN
  OUT
  ADJUSTMENT
}

enum transaction_status {
  PAID
  UNPAID
  CANCELLED
}

enum preorder_status {
  PENDING
  CONFIRMED
  CANCELLED
}

enum user_role {
  ADMIN
  CASHIER
  CUSTOMER
}
